openapi: 3.0.3
info:
  title: MeridianPulse API
  version: 1.0.0
  description: Meridian Pulse API
paths:
  /api/agents/create:
    post:
      operationId: agents_create_create
      description:
        Create Agents. To populate canvases, use /api/canvas/list and put
        it as comma separated value
      tags:
        - agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/agents/delete/{slug}:
    get:
      operationId: agents_delete_retrieve
      description: Delete Agents
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - agents
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/agents/edit/{slug}:
    post:
      operationId: agents_edit_create
      description: Edit Agents
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AgentsCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/agents/list:
    get:
      operationId: agents_list_retrieve
      description: List Agents
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      tags:
        - agents
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/canvas/list:
    get:
      operationId: canvas_list_retrieve
      description: Canvas
      tags:
        - canvas
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/chat/:
    post:
      operationId: chat_create
      description:
        Handling Chat. chat_type is 'workroom' or 'agents'. Slug is the
        slug of workroom or agents (Optional). Edit chat, gunakan branch = 'new'
      parameters:
        - in: path
          name: branch
          schema:
            type: string
          required: true
        - in: path
          name: chat_type
          schema:
            type: string
          required: true
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                  canvas:
                    type: array
                    items:
                      type: string
                  branch:
                    type: string
                  chat_type:
                    type: string
                  slug:
                    type: string
          description: ""
  /api/chat/{chat_type}/:
    post:
      operationId: chat_create_2
      description:
        Handling Chat. chat_type is 'workroom' or 'agents'. Slug is the
        slug of workroom or agents (Optional). Edit chat, gunakan branch = 'new'
      parameters:
        - in: path
          name: branch
          schema:
            type: string
          required: true
        - in: path
          name: chat_type
          schema:
            type: string
          required: true
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                  canvas:
                    type: array
                    items:
                      type: string
                  branch:
                    type: string
                  chat_type:
                    type: string
                  slug:
                    type: string
          description: ""
  /api/chat/{chat_type}/{slug}/:
    post:
      operationId: chat_create_3
      description:
        Handling Chat. chat_type is 'workroom' or 'agents'. Slug is the
        slug of workroom or agents (Optional). Edit chat, gunakan branch = 'new'
      parameters:
        - in: path
          name: branch
          schema:
            type: string
          required: true
        - in: path
          name: chat_type
          schema:
            type: string
          required: true
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                  canvas:
                    type: array
                    items:
                      type: string
                  branch:
                    type: string
                  chat_type:
                    type: string
                  slug:
                    type: string
          description: ""
  /api/chat/{chat_type}/{slug}/{branch}/:
    post:
      operationId: chat_create_4
      description:
        Handling Chat. chat_type is 'workroom' or 'agents'. Slug is the
        slug of workroom or agents (Optional). Edit chat, gunakan branch = 'new'
      parameters:
        - in: path
          name: branch
          schema:
            type: string
          required: true
        - in: path
          name: chat_type
          schema:
            type: string
          required: true
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ChatCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
                  canvas:
                    type: array
                    items:
                      type: string
                  branch:
                    type: string
                  chat_type:
                    type: string
                  slug:
                    type: string
          description: ""
  /api/chat_response/{task_id}/:
    get:
      operationId: chat_response_retrieve
      description: Chat Response endpoint
      parameters:
        - in: path
          name: task_id
          schema:
            type: string
          required: true
      tags:
        - chat_response
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/login/:
    post:
      operationId: login_create
      description: Login endpoint
      tags:
        - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      security:
        - BearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/models/list:
    get:
      operationId: models_list_retrieve
      description: Models List endpoint
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: skip
          schema:
            type: integer
      tags:
        - models
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/tools/commands:
    get:
      operationId: tools_commands_retrieve
      description: List of MCP Commands.
      tags:
        - tools
      security:
        - BearerAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                description: list of commands retrieved
          description: ""
  /api/tools/create:
    post:
      operationId: tools_create_create
      description:
        "Create a new MCP Server. \nGet choices for 'command' field from\
        \ /api/tools/commands."
      tags:
        - tools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Server created successfully.
          description: ""
  /api/tools/delete/{slug}:
    get:
      operationId: tools_delete_retrieve
      description: Edit MCP Server.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - tools
      security:
        - BearerAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Server edited successfully.
          description: ""
  /api/tools/edit/{slug}:
    post:
      operationId: tools_edit_create
      description: "Edit MCP Server. \nGet choices for 'command' field from /api/tools/commands."
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - tools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MCPServerCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Server edited successfully.
          description: ""
  /api/tools/list:
    get:
      operationId: tools_list_retrieve
      description: Tools List endpoint
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      tags:
        - tools
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/workroom/create:
    post:
      operationId: workroom_create_create
      description: Create WorkRoom. Agents and Tools are comma separated values
      tags:
        - workroom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/workroom/delete/{slug}:
    get:
      operationId: workroom_delete_retrieve
      description: Delete Workroom
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - workroom
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/workroom/edit/{slug}:
    post:
      operationId: workroom_edit_create
      description: Edit Workroom
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      tags:
        - workroom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/WorkRoomCreateRequest"
        required: true
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
  /api/workroom/list:
    get:
      operationId: workroom_list_retrieve
      description: List WorkRoom
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      tags:
        - workroom
      security:
        - BearerAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ""
components:
  schemas:
    AgentsCreateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        model:
          type: string
          minLength: 1
        prompt:
          type: string
          minLength: 1
        canvases:
          type: string
          minLength: 1
      required:
        - description
        - model
        - prompt
        - title
    ChatCreateRequest:
      type: object
      properties:
        message:
          type: string
          minLength: 1
      required:
        - message
    CommandEnum:
      enum:
        - npx
        - uvx
        - python
        - bash
        - node
        - go
      type: string
      description: |-
        * `npx` - npx
        * `uvx` - uvx
        * `python` - python
        * `bash` - bash
        * `node` - node
        * `go` - go
    EnvironmentRequest:
      type: object
      properties:
        key:
          type: string
          minLength: 1
        key_alias:
          type: string
          minLength: 1
      required:
        - key
        - key_alias
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        tenant_id:
          type: string
          minLength: 1
      required:
        - password
        - tenant_id
        - username
    MCPServerCreateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        command:
          $ref: "#/components/schemas/CommandEnum"
        arguments:
          type: array
          items:
            type: string
            minLength: 1
        environments:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentRequest"
      required:
        - command
        - description
        - title
    WorkRoomCreateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        model:
          type: string
          minLength: 1
        prompt:
          type: string
          minLength: 1
        agents:
          type: string
          minLength: 1
        tools:
          type: string
          minLength: 1
        canvases:
          type: string
          minLength: 1
      required:
        - description
        - model
        - prompt
        - title
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
